name: CI Pipeline
on:
  pull_request:
    branches:
      - "main"

permissions:
  contents: read
env:
  PYTHON_VERSION: "3.13"

jobs:

  commit-message-lint:
    name: Commit Message Linter - Full History
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Fetch All Branches and Tags
        run: |
          # Ensure all commit history is available for linting
          git fetch --prune --unshallow || true
          git fetch --all
      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Ensure Pre-commit Cache Directory Exists
        run: mkdir -p ~/.cache/pre-commit/commit-message-lint
      - name: Cache Pre-commit Environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/commit-message-lint
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}-commit-message-lint
      - name: Install Pre-commit Hooks
        run: |
          pre-commit install
      - name: Enforce Conventional Commit Messages
        run: |
          # Loop through all new commits and check message format
          for sha in $(git log origin/${{ github.ref_name }}~1..${{ github.ref_name }} --pretty=format:"%H"); do
            git show -s --format=%B $sha > .git/COMMIT_MSG_TMP
            pre-commit run conventional-pre-commit --hook-stage commit-msg --commit-msg-filename .git/COMMIT_MSG_TMP || exit 1
          done
        # If any commit fails the check, the workflow will fail and notify contributors.
        # Note: Email notifications are sent by GitHub on workflow failure if enabled in repo settings.

  pre-commit:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Ensure Pre-commit Cache Directory Exists
        run: mkdir -p ~/.cache/pre-commit/pre-commit
      - name: Cache Pre-commit Environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}-pre-commit
      - name: Run Pre-commit Checks
        run: |
          pre-commit run --show-diff-on-failure --color=always --all-files
